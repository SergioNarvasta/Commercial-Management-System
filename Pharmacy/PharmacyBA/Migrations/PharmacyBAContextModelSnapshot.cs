// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmacyBA.Data;

#nullable disable

namespace PharmacyBA.Migrations
{
    [DbContext(typeof(PharmacyBAContext))]
    partial class PharmacyBAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PharmacyBA.Models.Cliente", b =>
                {
                    b.Property<int>("CodCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodCliente"), 1L, 1);

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DNI")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("FechaReg")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("RUC")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("CodCliente");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("PharmacyBA.Models.DetalleIngreso", b =>
                {
                    b.Property<int>("CodDetIng")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodDetIng"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CodIngreso")
                        .HasColumnType("int");

                    b.Property<int>("CodProducto")
                        .HasColumnType("int");

                    b.Property<int>("CodProveedor")
                        .HasColumnType("int");

                    b.Property<int?>("IngresoCodIngreso")
                        .HasColumnType("int");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int?>("ProductoCodProducto")
                        .HasColumnType("int");

                    b.Property<int?>("ProveedorCodProveedor")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.Property<string>("UniMedida")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodDetIng");

                    b.HasIndex("IngresoCodIngreso");

                    b.HasIndex("ProductoCodProducto");

                    b.HasIndex("ProveedorCodProveedor");

                    b.ToTable("DetalleIngreso");
                });

            modelBuilder.Entity("PharmacyBA.Models.DetalleVenta", b =>
                {
                    b.Property<int>("CodDetVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodDetVenta"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CodProducto")
                        .HasColumnType("int");

                    b.Property<int>("CodVenta")
                        .HasColumnType("int");

                    b.Property<double>("IGV")
                        .HasColumnType("float");

                    b.Property<double>("Precio")
                        .HasColumnType("float");

                    b.Property<int>("ProductoCodProducto")
                        .HasColumnType("int");

                    b.Property<double>("Subtotal")
                        .HasColumnType("float");

                    b.Property<int>("VentaCodventa")
                        .HasColumnType("int");

                    b.HasKey("CodDetVenta");

                    b.HasIndex("ProductoCodProducto");

                    b.HasIndex("VentaCodventa");

                    b.ToTable("DetalleVenta");
                });

            modelBuilder.Entity("PharmacyBA.Models.Ingreso", b =>
                {
                    b.Property<int>("CodIngreso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodIngreso"), 1L, 1);

                    b.Property<int>("CodUsuario")
                        .HasColumnType("int");

                    b.Property<DateTime>("FecIng")
                        .HasColumnType("datetime2");

                    b.Property<double>("Totalcompra")
                        .HasColumnType("float");

                    b.Property<int?>("UsuarioCodUsuario")
                        .HasColumnType("int");

                    b.HasKey("CodIngreso");

                    b.HasIndex("UsuarioCodUsuario");

                    b.ToTable("Ingreso");
                });

            modelBuilder.Entity("PharmacyBA.Models.Lote", b =>
                {
                    b.Property<int>("CodLote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodLote"), 1L, 1);

                    b.Property<DateTime>("FechaVen")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegSanit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodLote");

                    b.ToTable("Lote");
                });

            modelBuilder.Entity("PharmacyBA.Models.Producto", b =>
                {
                    b.Property<int>("CodProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodProducto"), 1L, 1);

                    b.Property<int>("CodLote")
                        .HasColumnType("int");

                    b.Property<decimal?>("Concentracion")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Correlativo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("LoteCodLote")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("NombreCientifico")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<decimal>("PrecioVenta")
                        .HasMaxLength(10)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Presentacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Restriccion")
                        .HasMaxLength(5)
                        .HasColumnType("bit");

                    b.Property<decimal>("Stock")
                        .HasMaxLength(10)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CodProducto");

                    b.HasIndex("LoteCodLote");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("PharmacyBA.Models.Proveedor", b =>
                {
                    b.Property<int>("CodProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodProveedor"), 1L, 1);

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechReg")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ruc")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<int>("Telefono")
                        .HasMaxLength(9)
                        .HasColumnType("int");

                    b.HasKey("CodProveedor");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("PharmacyBA.Models.TipoComprobante", b =>
                {
                    b.Property<int>("CodTipoComp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodTipoComp"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("CodTipoComp");

                    b.ToTable("TipoComprobante");
                });

            modelBuilder.Entity("PharmacyBA.Models.TipoUsuario", b =>
                {
                    b.Property<int>("CodTipoUsu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodTipoUsu"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodTipoUsu");

                    b.ToTable("TipoUsuario");
                });

            modelBuilder.Entity("PharmacyBA.Models.Usuario", b =>
                {
                    b.Property<int>("CodUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodUsuario"), 1L, 1);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaReg")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdTipoUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TipoUsuarioCodTipoUsu")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CodUsuario");

                    b.HasIndex("TipoUsuarioCodTipoUsu");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("PharmacyBA.Models.Venta", b =>
                {
                    b.Property<int>("Codventa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codventa"), 1L, 1);

                    b.Property<int>("ClienteCodCliente")
                        .HasColumnType("int");

                    b.Property<int>("CodCliente")
                        .HasColumnType("int");

                    b.Property<int>("CodTipoComp")
                        .HasColumnType("int");

                    b.Property<int>("CodUsuario")
                        .HasColumnType("int");

                    b.Property<int>("Descuento")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("TipoComprobanteCodTipoComp")
                        .HasColumnType("int");

                    b.Property<string>("TipoPago")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("UsuarioCodUsuario")
                        .HasColumnType("int");

                    b.HasKey("Codventa");

                    b.HasIndex("ClienteCodCliente");

                    b.HasIndex("TipoComprobanteCodTipoComp");

                    b.HasIndex("UsuarioCodUsuario");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("PharmacyBA.Models.DetalleIngreso", b =>
                {
                    b.HasOne("PharmacyBA.Models.Ingreso", "Ingreso")
                        .WithMany("DetalleIngreso")
                        .HasForeignKey("IngresoCodIngreso");

                    b.HasOne("PharmacyBA.Models.Producto", "Producto")
                        .WithMany("DetalleIngreso")
                        .HasForeignKey("ProductoCodProducto");

                    b.HasOne("PharmacyBA.Models.Proveedor", "Proveedor")
                        .WithMany("DetalleIngreso")
                        .HasForeignKey("ProveedorCodProveedor");

                    b.Navigation("Ingreso");

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("PharmacyBA.Models.DetalleVenta", b =>
                {
                    b.HasOne("PharmacyBA.Models.Producto", "Producto")
                        .WithMany("DetalleVenta")
                        .HasForeignKey("ProductoCodProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyBA.Models.Venta", "Venta")
                        .WithMany("DetalleVenta")
                        .HasForeignKey("VentaCodventa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("PharmacyBA.Models.Ingreso", b =>
                {
                    b.HasOne("PharmacyBA.Models.Usuario", "Usuario")
                        .WithMany("Ingreso")
                        .HasForeignKey("UsuarioCodUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PharmacyBA.Models.Producto", b =>
                {
                    b.HasOne("PharmacyBA.Models.Lote", "Lote")
                        .WithMany("Producto")
                        .HasForeignKey("LoteCodLote")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("PharmacyBA.Models.Usuario", b =>
                {
                    b.HasOne("PharmacyBA.Models.TipoUsuario", "TipoUsuario")
                        .WithMany("Usuario")
                        .HasForeignKey("TipoUsuarioCodTipoUsu");

                    b.Navigation("TipoUsuario");
                });

            modelBuilder.Entity("PharmacyBA.Models.Venta", b =>
                {
                    b.HasOne("PharmacyBA.Models.Cliente", "Cliente")
                        .WithMany("Venta")
                        .HasForeignKey("ClienteCodCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyBA.Models.TipoComprobante", "TipoComprobante")
                        .WithMany("Venta")
                        .HasForeignKey("TipoComprobanteCodTipoComp")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PharmacyBA.Models.Usuario", "Usuario")
                        .WithMany("Venta")
                        .HasForeignKey("UsuarioCodUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("TipoComprobante");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PharmacyBA.Models.Cliente", b =>
                {
                    b.Navigation("Venta");
                });

            modelBuilder.Entity("PharmacyBA.Models.Ingreso", b =>
                {
                    b.Navigation("DetalleIngreso");
                });

            modelBuilder.Entity("PharmacyBA.Models.Lote", b =>
                {
                    b.Navigation("Producto");
                });

            modelBuilder.Entity("PharmacyBA.Models.Producto", b =>
                {
                    b.Navigation("DetalleIngreso");

                    b.Navigation("DetalleVenta");
                });

            modelBuilder.Entity("PharmacyBA.Models.Proveedor", b =>
                {
                    b.Navigation("DetalleIngreso");
                });

            modelBuilder.Entity("PharmacyBA.Models.TipoComprobante", b =>
                {
                    b.Navigation("Venta");
                });

            modelBuilder.Entity("PharmacyBA.Models.TipoUsuario", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PharmacyBA.Models.Usuario", b =>
                {
                    b.Navigation("Ingreso");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("PharmacyBA.Models.Venta", b =>
                {
                    b.Navigation("DetalleVenta");
                });
#pragma warning restore 612, 618
        }
    }
}
